<?php

defined('_QWEXEC') or die;

require(INCLUDES_DIR.'modules/user.php');

################################################
#           Authentication                     #
################################################

// Get variables in correct format for login()
$credentials['username'] = $VAR['login_username'];
$credentials['password'] = $VAR['login_pwd'];
if($QConfig->remember_me && isset($VAR['remember'])) { $options['remember'] = $VAR['remember']; }

// If login submitted 
if($VAR['action'] === 'login') {
    
    // recaptcha is disabled || recaptcha is enabled and passes authentication
    if(!$QConfig->recaptcha || ($QConfig->recaptcha && authenticate_recaptcha($QConfig->recaptcha_secret_key, $VAR['g-recaptcha-response']))) {

        /* Allowed to submit */
        
        // Does the account require the password to be reset, if so force it
        if(require_password_reset($db, get_user_id_by_username($db, $VAR['login_username']))) {
            force_page('user', 'login', 'warning_msg='.gettext("You must reset your password before you are allowed to login."));
            exit;
            
        } else {

            // Log the user in
            if(login($credentials, $options)) {

                force_page('index.php');
                exit;    

            }
            
        }

    } else {

        /* Failed reCAPTCHA  */         

        // Allow login page to load with reCAPTCHA warning message (already generated by authenticate_recaptcha())

    }
    
}

// Remove credentials as no longer needed
unset($credentials);

// If logout is set, then log the user off
if ($VAR['action'] == 'logout') {    
    logout();
}

// Build the page
$smarty->assign('remember_me', $QConfig->remember_me);
$smarty->assign('recaptcha', $QConfig->recaptcha);
$smarty->assign('recaptcha_site_key', $QConfig->recaptcha_site_key);

$BuildPage .= $smarty->fetch('user/login.tpl');